{% set name = "unidist" %}
{% set version = "0.7.2" %}

package:
  name: {{ name }}-packages
  version: {{ version }}

source:
  url: https://github.com/modin-project/unidist/archive/refs/tags/{{ version }}.tar.gz
  sha256: 4306da65fa22239b99349aade3c1d31ab245d25c7c2250f152c8eeb2e86d922f

build:
  number: 0
  skip: true  # [py<39]

# the outputs map the unidist options on PyPI (see upstream definition
# https://github.com/modin-project/unidist/blob/0.2.0/setup.py#L6-L11)
# from "unidist[<option>]" to "unidist-<option>" as a conda-forge package
outputs:
  - name: unidist-all
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('unidist', exact=True) }}
        - {{ pin_subpackage('unidist-dask', exact=True) }}
        - {{ pin_subpackage('unidist-ray', exact=True) }}  # [py<312]
        - {{ pin_subpackage('unidist-mpi', exact=True) }}
    test:
      imports:
        # dummy test; actual tests are in subpackages
        - unidist

  - name: unidist
    build:
      script: python -m pip install . --ignore-installed -vv
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
      host:
        - pip
        - setuptools
        - cython
        - python
      run:
        - python
        - packaging
        - cloudpickle
    test:
      imports:
        - unidist
      commands:
        # unidist has "pymp" and "pyseq" backends by default so we test both
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('pyseq'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('pymp'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"

  - name: unidist-dask
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('unidist', exact=True) }}
        - dask >=2.22.0
        - distributed >=2.22.0
    test:
      imports:
        - unidist
      commands:
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('dask'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"

  - name: unidist-ray
    build:
      # Ray does not have builds for python>=3.12
      skip: true  # [py>=312]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('unidist', exact=True) }}
        - ray-default >=1.13.0
        # aioredis 2.x breaks Ray
        # ref: https://github.com/conda-forge/ray-packages-feedstock/issues/38
        - aioredis <2
        # https://github.com/modin-project/unidist/issues/324
        - pydantic <2
    test:
      imports:
        - unidist
      commands:
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('ray'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"

  - name: unidist-mpi
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('unidist', exact=True) }}
        - mpi4py >=3.0.3
        - msgpack-python >=1.0.0
        - psutil
    test:
      # Currently we do not run actual tests for mpi backend because
      # MPI requires more graceful set up to be run in docker container.
      # Try out to find a fix.
      imports:
        - unidist

about:
  home: https://github.com/modin-project/unidist
  license: Apache-2.0 AND LicenseRef-Public-Domain
  license_family: Apache
  license_file:
    - LICENSE
    - licenses/versioneer-LICENSE.txt
  summary: Unified Distributed Execution
  description: |
    unidist is a framework that is intended to provide the unified API
    for distributed execution by supporting various performant execution backends.
    At the moment the following backends are supported under the hood:
    Ray, MPI, Dask, Python Multiprocessing (pymp), as well as a Python Sequential (pyseq) backend for debugging.
  doc_url: https://unidist.readthedocs.io/
  dev_url: https://github.com/modin-project/unidist

extra:
  recipe-maintainers:
    - YarShev
